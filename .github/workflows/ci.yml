name: CI/CD Pipeline

# Déclencher le workflow sur push vers main ou sur les pull requests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      
    - name: Configuration Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Installation des dépendances
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        # Installer seulement les dépendances nécessaires pour les tests
        pip install fastapi uvicorn python-dotenv
        
    - name: Tests de base (import des modules)
      run: |
        # Vérifier que les modules principaux peuvent être importés
        python -c "from app.core.rag_pipeline import load_and_process_pdf"
        python -c "from app.main import app"
        echo "✅ Tests d'import réussis"

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      
    - name: Configuration de Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build de l'image Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: rag-analyst:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test de l'image Docker
      run: |
        # Créer un fichier .env factice pour les tests
        echo "OPENAI_API_KEY=sk-test-fake-key-for-ci" > .env
        
        # Lancer le conteneur en arrière-plan
        docker run -d -p 8000:8000 --name test-container --env-file .env rag-analyst:latest
        
        # Attendre que l'application se lance
        sleep 30
        
        # Tester que l'API répond
        curl -f http://localhost:8000/ || exit 1
        
        # Arrêter et nettoyer
        docker stop test-container
        docker rm test-container
        
        echo "✅ Test Docker réussi"

  # Job conditionnel pour push vers Docker Hub (seulement sur la branche main)
  publish:
    runs-on: ubuntu-latest
    needs: [test, build-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      
    - name: Configuration de Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Connexion à Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build et Push vers Docker Hub
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/rag-analyst:latest
          ${{ secrets.DOCKER_USERNAME }}/rag-analyst:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
